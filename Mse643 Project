{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMd8CCY3LiA3A1GfMikhkQx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ajit-K-Sa/Ajit-K-Sa/blob/main/Mse643%20Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fXE82fCm_JAB"
      },
      "outputs": [],
      "source": [
        "#import all necessary library\n",
        "\n",
        "import os,sys\n",
        "from random import shuffle\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "from keras.applications.imagenet_utils import preprocess_input\n",
        "from keras.preprocessing import image\n",
        "from keras.applications import vgg16\n",
        "#from keras.applications.resnet50 import ResNet50\n",
        "\n",
        "#Image processing library\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing.image import load_img\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "from PIL import Image\n",
        "\n",
        "import cv2\n",
        "import itertools\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.manifold import TSNE\n",
        "from sklearn.decomposition import PCA"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize keras model for VGG16 network\n",
        "model = vgg16.VGG16(include_top=False,weights='imagenet',pooling = 'avg')"
      ],
      "metadata": {
        "id": "RbaY5uwa_oyQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#connecting path to google drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Create the paths for inserting the train images\n",
        "ROOT_DIR = os.getcwd()\n",
        "train_dir = os.path.join(ROOT_DIR, \"/content/drive/MyDrive/train_images\")\n",
        "train_dirs = os.listdir(train_dir)\n",
        "train_images = len(train_dirs)\n",
        "\n",
        "# Create the paths for inserting  the test images\n",
        "test_dir = os.path.join(ROOT_DIR, \"/content/drive/MyDrive/test_images\")\n",
        "test_dirs = os.listdir(test_dir)\n",
        "test_images = len(test_dirs)\n",
        "\n",
        "n_images = train_images + test_images\n",
        "n_images\n",
        "\n"
      ],
      "metadata": {
        "id": "8QQlrzpT_xGe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1151b8b4-4c3e-4e35-83d2-6f370228834c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "405"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a numpy.ndarray that stores the features that will be extracted by the VGG\n",
        "features = np.empty([n_images,512])\n",
        "\n",
        "# Crete an array for the targets and then define the targets\n",
        "target = np.empty(n_images)\n",
        "\n",
        "# For each tungsten composition there are 150 train images and 12 test images, except the 90wt% tungsten composition that contains \n",
        "# only 75 train images and 6 test images\n",
        "train_imgs_per_class = 75\n",
        "test_imgs_per_class = 6\n",
        "\n",
        "# Label images according to 5 categories of tungsten composition\n",
        "# First, populate the target array with the labels of the train images \n",
        "target[:train_imgs_per_class] = 0\n",
        "target[train_imgs_per_class:2*train_imgs_per_class] = 1\n",
        "target[2*train_imgs_per_class:3*train_imgs_per_class] = 2\n",
        "target[3*train_imgs_per_class:4*train_imgs_per_class] = 3\n",
        "target[4*train_imgs_per_class:train_images] = 4\n",
        "\n",
        "# Next, populate the target array with the labels of the test images \n",
        "target[train_images:train_images + test_imgs_per_class] = 0\n",
        "target[train_images + test_imgs_per_class:train_images + 2*test_imgs_per_class] = 1\n",
        "target[train_images + 2*test_imgs_per_class:train_images + 3*test_imgs_per_class] = 2\n",
        "target[train_images + 3*test_imgs_per_class:train_images + 4*test_imgs_per_class] = 3\n",
        "target[train_images + 4*test_imgs_per_class:train_images + test_images] = 4\n",
        "\n",
        "\n",
        "# convert them into a list\n",
        "targets = list(target)"
      ],
      "metadata": {
        "id": "pwBbYl8eBXKh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load images and extract features with VGG16 for train and test images\n",
        "i = 0\n",
        "for item in train_dirs:\n",
        "        img_path = os.path.join(train_dir,item) \n",
        "        if os.path.isfile(img_path):\n",
        "            \n",
        "            img = tf.keras.utils.load_img(img_path, target_size=(224, 224))\n",
        "            x = tf.keras.preprocessing.image.img_to_array(img)\n",
        "            x = np.expand_dims(x, axis=0)\n",
        "            x = preprocess_input(x)\n",
        "            features[i] = model.predict(x)\n",
        "            i+=1\n",
        "\n",
        "for item in test_dirs:\n",
        "        img_path = os.path.join(test_dir,item) \n",
        "        if os.path.isfile(img_path):\n",
        "            \n",
        "            img = tf.keras.utils.load_img(img_path, target_size=(224, 224))\n",
        "            x = tf.keras.preprocessing.image.img_to_array(img)\n",
        "            x = np.expand_dims(x, axis=0)\n",
        "            x = preprocess_input(x)\n",
        "            features[i] = model.predict(x)\n",
        "            i+=1            \n"
      ],
      "metadata": {
        "id": "wjwXKgUyBiS3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2cb98422-2572-4a34-daff-d6c4e045369a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 1s 684ms/step\n",
            "1/1 [==============================] - 1s 550ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 739ms/step\n",
            "1/1 [==============================] - 1s 552ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 818ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 858ms/step\n",
            "1/1 [==============================] - 1s 541ms/step\n",
            "1/1 [==============================] - 1s 530ms/step\n",
            "1/1 [==============================] - 1s 550ms/step\n",
            "1/1 [==============================] - 1s 536ms/step\n",
            "1/1 [==============================] - 1s 520ms/step\n",
            "1/1 [==============================] - 1s 534ms/step\n",
            "1/1 [==============================] - 1s 535ms/step\n",
            "1/1 [==============================] - 1s 552ms/step\n",
            "1/1 [==============================] - 1s 535ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 527ms/step\n",
            "1/1 [==============================] - 1s 526ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 519ms/step\n",
            "1/1 [==============================] - 1s 542ms/step\n",
            "1/1 [==============================] - 1s 533ms/step\n",
            "1/1 [==============================] - 1s 662ms/step\n",
            "1/1 [==============================] - 1s 985ms/step\n",
            "1/1 [==============================] - 1s 956ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 566ms/step\n",
            "1/1 [==============================] - 1s 552ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 602ms/step\n",
            "1/1 [==============================] - 1s 525ms/step\n",
            "1/1 [==============================] - 1s 539ms/step\n",
            "1/1 [==============================] - 1s 522ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 530ms/step\n",
            "1/1 [==============================] - 1s 527ms/step\n",
            "1/1 [==============================] - 1s 539ms/step\n",
            "1/1 [==============================] - 1s 520ms/step\n",
            "1/1 [==============================] - 1s 528ms/step\n",
            "1/1 [==============================] - 1s 531ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 525ms/step\n",
            "1/1 [==============================] - 1s 521ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 981ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 920ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 995ms/step\n",
            "1/1 [==============================] - 1s 944ms/step\n",
            "1/1 [==============================] - 1s 961ms/step\n",
            "1/1 [==============================] - 1s 920ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 1s 980ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 944ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 671ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 539ms/step\n",
            "1/1 [==============================] - 1s 521ms/step\n",
            "1/1 [==============================] - 1s 541ms/step\n",
            "1/1 [==============================] - 1s 549ms/step\n",
            "1/1 [==============================] - 1s 553ms/step\n",
            "1/1 [==============================] - 1s 544ms/step\n",
            "1/1 [==============================] - 1s 625ms/step\n",
            "1/1 [==============================] - 1s 953ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 710ms/step\n",
            "1/1 [==============================] - 1s 565ms/step\n",
            "1/1 [==============================] - 1s 563ms/step\n",
            "1/1 [==============================] - 1s 572ms/step\n",
            "1/1 [==============================] - 1s 556ms/step\n",
            "1/1 [==============================] - 1s 549ms/step\n",
            "1/1 [==============================] - 1s 570ms/step\n",
            "1/1 [==============================] - 1s 553ms/step\n",
            "1/1 [==============================] - 1s 571ms/step\n",
            "1/1 [==============================] - 1s 571ms/step\n",
            "1/1 [==============================] - 1s 565ms/step\n",
            "1/1 [==============================] - 1s 577ms/step\n",
            "1/1 [==============================] - 1s 553ms/step\n",
            "1/1 [==============================] - 1s 563ms/step\n",
            "1/1 [==============================] - 1s 569ms/step\n",
            "1/1 [==============================] - 1s 553ms/step\n",
            "1/1 [==============================] - 1s 890ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 968ms/step\n",
            "1/1 [==============================] - 1s 567ms/step\n",
            "1/1 [==============================] - 1s 560ms/step\n",
            "1/1 [==============================] - 1s 554ms/step\n",
            "1/1 [==============================] - 1s 580ms/step\n",
            "1/1 [==============================] - 1s 551ms/step\n",
            "1/1 [==============================] - 1s 561ms/step\n",
            "1/1 [==============================] - 1s 562ms/step\n",
            "1/1 [==============================] - 1s 573ms/step\n",
            "1/1 [==============================] - 1s 556ms/step\n",
            "1/1 [==============================] - 1s 565ms/step\n",
            "1/1 [==============================] - 1s 585ms/step\n",
            "1/1 [==============================] - 1s 563ms/step\n",
            "1/1 [==============================] - 1s 661ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 578ms/step\n",
            "1/1 [==============================] - 1s 559ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 556ms/step\n",
            "1/1 [==============================] - 1s 564ms/step\n",
            "1/1 [==============================] - 1s 559ms/step\n",
            "1/1 [==============================] - 1s 571ms/step\n",
            "1/1 [==============================] - 1s 570ms/step\n",
            "1/1 [==============================] - 1s 577ms/step\n",
            "1/1 [==============================] - 1s 557ms/step\n",
            "1/1 [==============================] - 1s 559ms/step\n",
            "1/1 [==============================] - 1s 555ms/step\n",
            "1/1 [==============================] - 1s 569ms/step\n",
            "1/1 [==============================] - 1s 575ms/step\n",
            "1/1 [==============================] - 1s 574ms/step\n",
            "1/1 [==============================] - 1s 711ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 977ms/step\n",
            "1/1 [==============================] - 1s 565ms/step\n",
            "1/1 [==============================] - 1s 561ms/step\n",
            "1/1 [==============================] - 1s 571ms/step\n",
            "1/1 [==============================] - 1s 563ms/step\n",
            "1/1 [==============================] - 1s 551ms/step\n",
            "1/1 [==============================] - 1s 550ms/step\n",
            "1/1 [==============================] - 1s 554ms/step\n",
            "1/1 [==============================] - 1s 573ms/step\n",
            "1/1 [==============================] - 1s 565ms/step\n",
            "1/1 [==============================] - 1s 557ms/step\n",
            "1/1 [==============================] - 1s 558ms/step\n",
            "1/1 [==============================] - 1s 557ms/step\n",
            "1/1 [==============================] - 1s 563ms/step\n",
            "1/1 [==============================] - 1s 563ms/step\n",
            "1/1 [==============================] - 1s 564ms/step\n",
            "1/1 [==============================] - 1s 612ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 618ms/step\n",
            "1/1 [==============================] - 1s 564ms/step\n",
            "1/1 [==============================] - 1s 552ms/step\n",
            "1/1 [==============================] - 1s 566ms/step\n",
            "1/1 [==============================] - 1s 548ms/step\n",
            "1/1 [==============================] - 1s 563ms/step\n",
            "1/1 [==============================] - 1s 556ms/step\n",
            "1/1 [==============================] - 1s 555ms/step\n",
            "1/1 [==============================] - 1s 575ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 562ms/step\n",
            "1/1 [==============================] - 1s 549ms/step\n",
            "1/1 [==============================] - 1s 535ms/step\n",
            "1/1 [==============================] - 1s 551ms/step\n",
            "1/1 [==============================] - 1s 526ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 763ms/step\n",
            "1/1 [==============================] - 1s 961ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 977ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 536ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 535ms/step\n",
            "1/1 [==============================] - 1s 546ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 532ms/step\n",
            "1/1 [==============================] - 1s 886ms/step\n",
            "1/1 [==============================] - 1s 848ms/step\n",
            "1/1 [==============================] - 1s 852ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 540ms/step\n",
            "1/1 [==============================] - 1s 551ms/step\n",
            "1/1 [==============================] - 1s 533ms/step\n",
            "1/1 [==============================] - 1s 532ms/step\n",
            "1/1 [==============================] - 1s 641ms/step\n",
            "1/1 [==============================] - 1s 986ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 988ms/step\n",
            "1/1 [==============================] - 1s 605ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 547ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 554ms/step\n",
            "1/1 [==============================] - 1s 533ms/step\n",
            "1/1 [==============================] - 1s 542ms/step\n",
            "1/1 [==============================] - 1s 558ms/step\n",
            "1/1 [==============================] - 1s 528ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 530ms/step\n",
            "1/1 [==============================] - 1s 710ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 555ms/step\n",
            "1/1 [==============================] - 1s 544ms/step\n",
            "1/1 [==============================] - 1s 541ms/step\n",
            "1/1 [==============================] - 1s 530ms/step\n",
            "1/1 [==============================] - 1s 539ms/step\n",
            "1/1 [==============================] - 1s 536ms/step\n",
            "1/1 [==============================] - 1s 526ms/step\n",
            "1/1 [==============================] - 1s 542ms/step\n",
            "1/1 [==============================] - 1s 536ms/step\n",
            "1/1 [==============================] - 1s 544ms/step\n",
            "1/1 [==============================] - 1s 536ms/step\n",
            "1/1 [==============================] - 1s 547ms/step\n",
            "1/1 [==============================] - 1s 552ms/step\n",
            "1/1 [==============================] - 1s 529ms/step\n",
            "1/1 [==============================] - 1s 946ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 990ms/step\n",
            "1/1 [==============================] - 1s 803ms/step\n",
            "1/1 [==============================] - 1s 547ms/step\n",
            "1/1 [==============================] - 1s 540ms/step\n",
            "1/1 [==============================] - 1s 546ms/step\n",
            "1/1 [==============================] - 1s 544ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 540ms/step\n",
            "1/1 [==============================] - 1s 555ms/step\n",
            "1/1 [==============================] - 1s 548ms/step\n",
            "1/1 [==============================] - 1s 529ms/step\n",
            "1/1 [==============================] - 1s 533ms/step\n",
            "1/1 [==============================] - 1s 551ms/step\n",
            "1/1 [==============================] - 1s 536ms/step\n",
            "1/1 [==============================] - 1s 549ms/step\n",
            "1/1 [==============================] - 1s 524ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 805ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 650ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 562ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 550ms/step\n",
            "1/1 [==============================] - 1s 540ms/step\n",
            "1/1 [==============================] - 1s 544ms/step\n",
            "1/1 [==============================] - 1s 551ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 535ms/step\n",
            "1/1 [==============================] - 1s 564ms/step\n",
            "1/1 [==============================] - 1s 551ms/step\n",
            "1/1 [==============================] - 1s 526ms/step\n",
            "1/1 [==============================] - 1s 562ms/step\n",
            "1/1 [==============================] - 1s 533ms/step\n",
            "1/1 [==============================] - 1s 600ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 546ms/step\n",
            "1/1 [==============================] - 1s 547ms/step\n",
            "1/1 [==============================] - 1s 535ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 540ms/step\n",
            "1/1 [==============================] - 1s 529ms/step\n",
            "1/1 [==============================] - 1s 541ms/step\n",
            "1/1 [==============================] - 1s 540ms/step\n",
            "1/1 [==============================] - 1s 534ms/step\n",
            "1/1 [==============================] - 1s 542ms/step\n",
            "1/1 [==============================] - 1s 534ms/step\n",
            "1/1 [==============================] - 1s 546ms/step\n",
            "1/1 [==============================] - 1s 541ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 727ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 972ms/step\n",
            "1/1 [==============================] - 1s 535ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 566ms/step\n",
            "1/1 [==============================] - 1s 533ms/step\n",
            "1/1 [==============================] - 1s 542ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 539ms/step\n",
            "1/1 [==============================] - 1s 555ms/step\n",
            "1/1 [==============================] - 1s 534ms/step\n",
            "1/1 [==============================] - 1s 540ms/step\n",
            "1/1 [==============================] - 1s 544ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 544ms/step\n",
            "1/1 [==============================] - 1s 528ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 631ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 987ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 691ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 548ms/step\n",
            "1/1 [==============================] - 1s 536ms/step\n",
            "1/1 [==============================] - 1s 545ms/step\n",
            "1/1 [==============================] - 1s 535ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 527ms/step\n",
            "1/1 [==============================] - 1s 542ms/step\n",
            "1/1 [==============================] - 1s 531ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 544ms/step\n",
            "1/1 [==============================] - 1s 553ms/step\n",
            "1/1 [==============================] - 1s 530ms/step\n",
            "1/1 [==============================] - 1s 537ms/step\n",
            "1/1 [==============================] - 1s 898ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 979ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 870ms/step\n",
            "1/1 [==============================] - 1s 575ms/step\n",
            "1/1 [==============================] - 1s 549ms/step\n",
            "1/1 [==============================] - 1s 536ms/step\n",
            "1/1 [==============================] - 1s 546ms/step\n",
            "1/1 [==============================] - 1s 559ms/step\n",
            "1/1 [==============================] - 1s 535ms/step\n",
            "1/1 [==============================] - 1s 543ms/step\n",
            "1/1 [==============================] - 1s 525ms/step\n",
            "1/1 [==============================] - 1s 557ms/step\n",
            "1/1 [==============================] - 1s 533ms/step\n",
            "1/1 [==============================] - 1s 531ms/step\n",
            "1/1 [==============================] - 1s 539ms/step\n",
            "1/1 [==============================] - 1s 527ms/step\n",
            "1/1 [==============================] - 1s 547ms/step\n",
            "1/1 [==============================] - 1s 528ms/step\n",
            "1/1 [==============================] - 1s 598ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 955ms/step\n",
            "1/1 [==============================] - 1s 529ms/step\n",
            "1/1 [==============================] - 1s 544ms/step\n",
            "1/1 [==============================] - 1s 529ms/step\n",
            "1/1 [==============================] - 1s 542ms/step\n",
            "1/1 [==============================] - 1s 550ms/step\n",
            "1/1 [==============================] - 1s 540ms/step\n",
            "1/1 [==============================] - 1s 547ms/step\n",
            "1/1 [==============================] - 1s 530ms/step\n",
            "1/1 [==============================] - 1s 541ms/step\n",
            "1/1 [==============================] - 1s 538ms/step\n",
            "1/1 [==============================] - 1s 534ms/step\n",
            "1/1 [==============================] - 1s 562ms/step\n",
            "1/1 [==============================] - 1s 539ms/step\n",
            "1/1 [==============================] - 1s 552ms/step\n",
            "1/1 [==============================] - 1s 539ms/step\n",
            "1/1 [==============================] - 1s 548ms/step\n",
            "1/1 [==============================] - 1s 634ms/step\n",
            "1/1 [==============================] - 1s 968ms/step\n",
            "1/1 [==============================] - 1s 1s/step\n",
            "1/1 [==============================] - 1s 1s/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features_table = pd.DataFrame(features)\n",
        "print(features_table)\n",
        "\n",
        "# # Save the NumPy array as a CSV file\n",
        "# np.savetxt('features_table2.csv', features, delimiter=',')\n",
        "\n",
        "# # Print the contents of the CSV file to display it as a table\n",
        "# with open('features_table2.csv', 'r') as file:\n",
        "#     print(file.read())"
      ],
      "metadata": {
        "id": "tKEhDjhLDvl7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e7a2b52-673a-42ca-8b70-dbbfe93e9cd5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           0         1          2         3         4         5         6    \\\n",
            "0     2.869378  0.269483  11.905794  0.000000  0.000000  0.000000  2.533069   \n",
            "1    12.561784  0.000000   6.037309  0.902910  0.000000  0.039596  0.982819   \n",
            "2     7.395175  0.133823   5.232328  1.424554  0.000000  0.000000  3.301160   \n",
            "3     9.553348  1.912743   9.889141  0.959697  0.054737  0.125138  5.192118   \n",
            "4     7.641057  0.000000   2.127257  0.499988  0.000000  0.248693  2.545089   \n",
            "..         ...       ...        ...       ...       ...       ...       ...   \n",
            "400   0.098623  0.000000   8.336205  0.164282  0.088368  0.000000  3.190457   \n",
            "401  18.622305  0.000000   0.197872  2.026844  0.000000  0.430144  4.681669   \n",
            "402  10.546200  0.000000   2.340120  3.773095  0.000000  0.506658  0.246298   \n",
            "403  10.335385  0.020073   4.100516  0.503777  0.000000  0.203676  1.001827   \n",
            "404  10.584436  1.457198   1.427374  2.144516  0.640210  0.000000  2.384758   \n",
            "\n",
            "           7         8         9    ...       502       503       504  \\\n",
            "0     0.770312  0.000000  1.207582  ...  0.000000  0.000000  6.203961   \n",
            "1     4.844996  0.000749  7.899453  ...  0.000000  0.013273  6.239256   \n",
            "2     8.185324  0.000000  4.158330  ...  0.000000  0.080605  6.861940   \n",
            "3     7.204639  0.000000  4.943263  ...  0.247919  0.437535  3.967522   \n",
            "4     5.477734  0.002960  2.436783  ...  0.000000  0.115334  2.636915   \n",
            "..         ...       ...       ...  ...       ...       ...       ...   \n",
            "400   0.346418  0.772514  0.602744  ...  0.069459  0.000000  0.214807   \n",
            "401  18.316610  0.224674  8.003617  ...  1.358796  1.131342  1.668337   \n",
            "402   7.752559  0.000000  3.437791  ...  2.181815  0.698420  2.760273   \n",
            "403   1.262447  0.000000  2.129768  ...  0.841391  3.124887  3.180224   \n",
            "404   9.104789  0.053508  0.980182  ...  2.218560  0.525759  4.051246   \n",
            "\n",
            "          505       506       507       508       509       510        511  \n",
            "0    0.145134  0.002662  0.000000  0.000000  0.195255  3.488421   3.780181  \n",
            "1    2.265787  0.000000  0.945741  0.000000  2.326154  2.614864   6.242714  \n",
            "2    0.372592  0.105644  1.456033  1.001919  2.038845  1.472217   2.878624  \n",
            "3    0.421872  0.000000  0.252793  0.780774  0.260929  2.544533  10.450142  \n",
            "4    0.079767  0.000000  0.286944  0.076171  1.138532  1.671885  10.577707  \n",
            "..        ...       ...       ...       ...       ...       ...        ...  \n",
            "400  0.082018  0.275674  0.656855  0.000000  0.252266  3.322841   3.674514  \n",
            "401  0.110421  0.000773  2.204928  1.278154  0.103236  2.213509   2.205207  \n",
            "402  1.406514  0.798025  1.577486  2.912050  0.853525  0.408050   1.506582  \n",
            "403  0.046483  0.244256  0.110026  2.072301  0.298215  2.066050   0.201642  \n",
            "404  0.120395  0.166925  1.873426  2.646015  0.000000  2.331824   0.798514  \n",
            "\n",
            "[405 rows x 512 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# K nearest neighbors parameters\n",
        "neighbors = 15\n",
        "weight_option = 'uniform' # 'distance'\n",
        "#K means parameteres\n",
        "clusters = 5"
      ],
      "metadata": {
        "id": "o7zKqDVqFBCV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Insert the extracted features to PCA, in order to reduce dimensions to 50 or 100\n",
        "X_pca_50 = PCA(n_components=50).fit_transform(features)\n",
        "\n",
        "target_array = np.asarray(targets,dtype=np.int8)"
      ],
      "metadata": {
        "id": "CnaAoCAnFHSu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# For 5 classes\n",
        "labels = [ 'WHA90 1xx', 'WHA92 2xx', 'WHA95 3xx', 'WHA97 4xx', 'WHA99 5xx']\n",
        "colors = [0, 1, 2, 3, 4]\n"
      ],
      "metadata": {
        "id": "LPNFYMQNFNLC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Implement t-SNE dimensionality reduction for different values of perplexity\n",
        "for p in range(10, 50, 5):\n",
        "    \n",
        "    print('\\n')\n",
        "    print('Perplexity = {}'.format(p))\n",
        "    print('\\n')\n",
        "    \n",
        "    # Take the reduced features by PCA and insert them into t-sne\n",
        "    X_tsne= TSNE(n_components=2, perplexity=p, n_iter=3000, verbose=0).fit_transform(X_pca_50)\n",
        "    \n",
        "    # Separate the train images and their ground truth labels\n",
        "    X_tsne_train = X_tsne[:train_images]\n",
        "    target_train = target_array[:train_images] \n",
        "    \n",
        "    \n",
        "    # Separate the test images and their ground truth labels\n",
        "    X_tsne_test = X_tsne[train_images:]\n",
        "    target_test = target_array[train_images:]"
      ],
      "metadata": {
        "id": "WPaouFP-FuRD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4237452f-9c3b-429a-a78b-79ab3ce3ffe8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "Perplexity = 10\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Perplexity = 20\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Perplexity = 25\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Perplexity = 30\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Perplexity = 35\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Perplexity = 40\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Perplexity = 45\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot the result with scatter\n",
        "fig1 = plt.figure(figsize=(10, 10))\n",
        "ax1 = plt.axes(frameon=False)\n",
        "plt.setp(ax1, xticks=(), yticks=())\n",
        "plt.subplots_adjust(left=0.0, bottom=0.0, right=1.0, top=0.9,\n",
        "                wspace=0.0, hspace=0.0)\n",
        "scatter1 = plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=targets, cmap=\"Spectral\")\n",
        "handles1 = [plt.plot([],color=scatter1.get_cmap()(scatter1.norm(c)),ls=\"\", marker=\"o\")[0] for c in colors ]    \n",
        "legend1 = ax1.legend(handles1, labels, loc=\"lower right\")\n",
        "ax1.add_artist(legend1)"
      ],
      "metadata": {
        "id": "1T72mMiVWahN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 953
        },
        "outputId": "dd7ce581-3347-4f4f-d4d0-b8572ed77ba2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f8fb023d700>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans = KMeans(n_clusters=5, init = 'k-means++', n_init = 10, max_iter = 1000)\n",
        "kmeans.fit(X_tsne_train)\n",
        "labs = kmeans.labels_\n",
        "\n",
        "\n",
        "correspond_labels = np.zeros(labs.shape)\n",
        "\n",
        "# Convert the k-Means labeling into the same colormap labeling as the ground truth labeling    \n",
        "correspond_labels[labs==0] = np.argmax(np.bincount(target_train[labs==0]))    \n",
        "correspond_labels[labs==1] = np.argmax(np.bincount(target_train[labs==1]))\n",
        "correspond_labels[labs==2] = np.argmax(np.bincount(target_train[labs==2]))\n",
        "correspond_labels[labs==3] = np.argmax(np.bincount(target_train[labs==3]))\n",
        "correspond_labels[labs==4] = np.argmax(np.bincount(target_train[labs==4])) \n",
        "\n",
        "\n",
        "# find the errors\n",
        "l = [k if t==k else max(target_train)+1 for t,k in zip(target_train, correspond_labels)]\n",
        "l = np.asarray(l,dtype=np.int8)\n",
        "\n",
        "# correct indices\n",
        "cor_idx = l<=max(target_train)    \n",
        "cor_labels = l[cor_idx]\n",
        "    \n",
        "X_tsne_train_c = X_tsne_train[cor_idx]  \n"
      ],
      "metadata": {
        "id": "RUcyj--cWGdY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the result with scatter\n",
        "# Plot the result with scatter\n",
        "fig2 = plt.figure(figsize=(10, 10))\n",
        "ax2 = plt.axes(frameon=False)\n",
        "plt.setp(ax2, xticks=(), yticks=())\n",
        "plt.subplots_adjust(left=0.0, bottom=0.0, right=1.0, top=0.9, wspace=0.0, hspace=0.0)\n",
        "scatter2 = plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=labs, cmap=\"Spectral\")\n",
        "handles2 = [plt.plot([],color=scatter2.get_cmap()(scatter2.norm(c)),ls=\"\", marker=\"o\")[0] for c in colors ]    \n",
        "legend2 = ax2.legend(handles2, labels, loc=\"lower right\")\n",
        "ax2.add_artist(legend2)\n",
        "\n",
        "\n",
        "    "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "ecwTNmlMlJWq",
        "outputId": "b9c94673-e054-437d-8139-d1ee1621f660"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-0b9b5f681e3f>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Plot the result with scatter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Plot the result with scatter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mfig2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0max2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mframeon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxticks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myticks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# #Plot the result with scatter\n",
        "# fig2 = plt.figure(figsize=(10, 10))\n",
        "# ax2 = plt.axes(frameon=False)\n",
        "# plt.setp(ax2, xticks=(), yticks=())\n",
        "# plt.subplots_adjust(left=0.0, bottom=0.0, right=1.0, top=0.9, wspace=0.0, hspace=0.0)\n",
        "# scatter2 = plt.scatter(X_tsne[:, 0], X_tsne[:, 1], c=labs, cmap=\"Spectral\")\n",
        "# handles2 = [plt.plot([],color=scatter2.get_cmap()(scatter2.norm(c)),ls=\"\", marker=\"o\")[0] for c in colors ]    \n",
        "# legend2 = ax2.legend(handles2, labels, loc=\"lower right\")\n",
        "# ax2.add_artist(legend2)"
      ],
      "metadata": {
        "id": "yaUXUayoaixp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans_neigh = KNeighborsClassifier(n_neighbors=neighbors,weights=weight_option)\n",
        "kmeans_neigh.fit(X_tsne_train_c, cor_labels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "id": "F7wuSZMGb_N_",
        "outputId": "af3251fe-e1de-4665-ea98-8152275f2cc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=15)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=15)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=15)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the decision boundary. For that, we will assign a color to each\n",
        "# point in the mesh [x_min, x_max]x[y_min, y_max].\n",
        "x_min, x_max = X_tsne_train_c[:, 0].min() - 1, X_tsne_train_c[:, 0].max() + 1\n",
        "y_min, y_max = X_tsne_train_c[:, 1].min() - 1, X_tsne_train_c[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.2),\n",
        "                      np.arange(y_min, y_max, 0.2))\n",
        "xy = np.c_[xx.ravel(), yy.ravel()]"
      ],
      "metadata": {
        "id": "elisk3HWcRie"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " # Predict the label of each mexh point with K-nearest neighbors\n",
        "knn_labels = kmeans_neigh.predict(xy)\n"
      ],
      "metadata": {
        "id": "P2hyIMf2cd_E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_true = target_array[:len(correspond_labels)]"
      ],
      "metadata": {
        "id": "9QuwPLu2igyr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = accuracy_score(y_true, correspond_labels)\n",
        "\n",
        "print(\"Accuracy:\", accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pmTgm6eRfCsG",
        "outputId": "b73cd078-1c41-4b82-9019-6c41be3169a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.42133333333333334\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib\n",
        "import numpy as np\n",
        "def cmap_map(function, cmap):\n",
        "    \"\"\" Applies function (which should operate on vectors of shape 3: [r, g, b]), on colormap cmap.\n",
        " This routine will break any discontinuous points in a colormap.\n",
        "    \"\"\"\n",
        "    \n",
        "    cdict = cmap._segmentdata\n",
        "    step_dict = {}\n",
        "    # Firt get the list of points where the segments start or end\n",
        "    for key in ('red', 'green', 'blue'):\n",
        "        step_dict[key] = list(map(lambda x: x[0], cdict[key]))\n",
        "    step_list = sum(step_dict.values(), [])\n",
        "    step_list = np.array(list(set(step_list)))\n",
        "    # Then compute the LUT, and apply the function to the LUT\n",
        "    reduced_cmap = lambda step : np.array(cmap(step)[0:3])\n",
        "    old_LUT = np.array(list(map(reduced_cmap, step_list)))\n",
        "    new_LUT = np.array(list(map(function, old_LUT)))\n",
        "    # Now try to make a minimal segment definition of the new LUT\n",
        "    cdict = {}\n",
        "    for i, key in enumerate(['red','green','blue']):\n",
        "        this_cdict = {}\n",
        "        for j, step in enumerate(step_list):\n",
        "            if step in step_dict[key]:\n",
        "                this_cdict[step] = new_LUT[j, i]\n",
        "            elif new_LUT[j,i] != old_LUT[j, i]:\n",
        "                this_cdict[step] = new_LUT[j, i]\n",
        "        colorvector = list(map(lambda x: x + (x[1], ), this_cdict.items()))\n",
        "        colorvector.sort()\n",
        "        cdict[key] = colorvector\n",
        "\n",
        "    return matplotlib.colors.LinearSegmentedColormap('colormap',cdict,1024)\n"
      ],
      "metadata": {
        "id": "62g_N888c90Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Put the result into a color plot\n",
        "zz = knn_labels.reshape(xx.shape)\n",
        "\n",
        "light_brg = cmap_map(lambda x: x/2 + 0.5, matplotlib.cm.brg)\n",
        "dark_brg = cmap_map(lambda x: x*0.75, matplotlib.cm.brg)\n"
      ],
      "metadata": {
        "id": "lULBeOg-ckWj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the result with scatter\n",
        "fig1 = plt.figure(figsize=(10, 10))\n",
        "ax1 = plt.axes(frameon=False)\n",
        "plt.setp(ax1, xticks=(), yticks=())\n",
        "plt.subplots_adjust(left=0.0, bottom=0.0, right=1.0, top=0.9,\n",
        "                wspace=0.0, hspace=0.0)\n",
        "mp1 = plt.pcolormesh(xx, yy, zz, cmap=light_brg )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 936
        },
        "id": "kAO-VnfAckaZ",
        "outputId": "d1144d76-19e2-4dbe-d02f-249037d3ff64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " sc = plt.scatter(X_tsne_test[:, 0], X_tsne_test[:, 1], c='k', marker=\"*\")\n",
        "handles_1 = [plt.plot([],color=mp1.get_cmap()(mp1.norm(c)),ls=\"\", marker=\"o\")[0] for c in colors ]    \n",
        "legend_1 = ax1.legend(handles_1, labels, loc=\"lower right\")\n",
        "ax1.add_artist(legend_1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "w9BcidwPckce",
        "outputId": "ec5fd4d4-b95b-4591-a673-d18661f84106"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f8fb0016a90>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uTbQsEMGckeB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7ORXvQNNckhq"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}